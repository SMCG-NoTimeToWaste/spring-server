name: CD

on:
  workflow_dispatch:
  schedule:
    - cron: '0 15 * * 1,5'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: application.yml 생성
        run: |
          mkdir ./src/main/resources
          mkdir ./src/main/resources/ssh
          touch ./src/main/resources/application.yml
          touch ./src/main/resources/ssh/ssh.pem
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./src/main/resources/ssh/ssh.pem
    
      - name: gradlew에 실행 권한 부여
        run: chmod +x ./gradlew
        
      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |  
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: SPRING_PROFILES_ACTIVE=prod ./gradlew build -x test --no-daemon

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub Push Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Excute Remote SSH Commands Using SSH_PRIVATE_KEY
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker stop ${{ secrets.DOCKER_IMAGE_NAME }}
            docker rm ${{ secrets.DOCKER_IMAGE_NAME }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            docker run -d -p 8080:8080 --network=${{ secrets.DOCKER_NETWORK_NAME }} --name ${{ secrets.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            docker system prune -f
